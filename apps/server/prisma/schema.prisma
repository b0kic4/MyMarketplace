// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  clerkUserId   String
  username      String
  email         String
  imageUrl      String
  fullName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[] @relation("userProducts")
  savedProducts Product[] @relation("savedProducts")
  orders        Order[]   @relation("userOrder")
  cartId        Int?
  cart          Cart?     @relation("userCart")
}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String?
  isLogo    String?
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
}

model Product {
  id                  Int           @id @default(autoincrement())
  title               String
  description         String
  images              Image[]
  categoryType        String
  price               String
  sizes               String
  colors              String
  material            String
  texture             String
  stock               Int
  shippingInformation String
  isChecked           Boolean
  isUsed              Boolean
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              Int
  user                User?         @relation(fields: [userId], references: [id], name: "userProducts")
  savedByUsers        User[]        @relation("savedProducts")
  cart                CartProduct[]
  reviews             Review[]
}

model Cart {
  id        Int           @id @default(autoincrement())
  userId    Int           @unique
  productId Int
  user      User?         @relation("userCart", fields: [userId], references: [id])
  products  CartProduct[] @relation
  order     Order?        @relation("order")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId, productId], name: "idx_user_product")
}

model CartProduct {
  id             Int            @id @default(autoincrement())
  cartId         Int
  productId      Int
  quantity       Int            @default(1)
  purchaseStatus PurchaseStatus
  cart           Cart           @relation(fields: [cartId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([cartId, productId], name: "idx_cart_product")
}

model Review {
  id        Int     @id @default(autoincrement())
  content   String
  rating    Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id                Int         @id @default(autoincrement())
  userId            Int
  totalPrice        String
  cartId            Int?        @unique
  purchasedProducts Cart?       @relation(fields: [cartId], references: [id], name: "order")
  OrderStatus       OrderStatus
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id], name: "userOrder")
}

enum PurchaseStatus {
  NotPurchased
  Purchased
  Delivering
  Delivered
}

enum OrderStatus {
  Succeed
  Failed
}
