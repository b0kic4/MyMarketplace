// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  clerkUserId   String
  username      String
  email         String
  imageUrl      String
  fullName      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[] @relation("userProducts")
  savedProducts Product[] @relation("savedProducts")
  orders        Order[]   @relation("userOrder")
  cartId        Int?
  Review        Review[]  @relation("userReviews")
  Cart          Cart?     @relation(fields: [cartId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String?
  isLogo    String?
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
}

model Product {
  id                  Int           @id @default(autoincrement())
  title               String
  description         String
  images              Image[]
  categoryType        String
  price               String
  sizes               String
  colors              String
  material            String
  texture             String
  stock               Int
  shippingInformation String
  isChecked           Boolean
  isUsed              Boolean
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              Int
  user                User?         @relation(fields: [userId], references: [id], name: "userProducts")
  savedByUsers        User[]        @relation("savedProducts")
  cart                CartProduct[]
  reviews             Review[]      @relation("productReviews")
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int
  productId   Int?
  products    CartProduct[] @relation
  order       Order?        @relation("order")
  isPurchased Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  User        User[]

  @@index([userId, productId], name: "idx_user_product")
}

model CartProduct {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  orderId   Int?
  order     Order?   @relation("purchasedProducts", fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId, productId], name: "idx_cart_product")
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  rating    Int
  productId Int
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], name: "userReviews")
  product   Product  @relation(fields: [productId], references: [id], name: "productReviews")
  Order     Order    @relation(fields: [orderId], references: [id], name: "orderReviews")
}

model Order {
  id                Int           @id @default(autoincrement())
  userId            Int
  totalPrice        String
  cartId            Int?          @unique
  Cart              Cart?         @relation(fields: [cartId], references: [id], name: "order")
  purchasedProducts CartProduct[] @relation("purchasedProducts")
  orderStatus       OrderStatus
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id], name: "userOrder")
  reviews           Review[]      @relation(name: "orderReviews")
}

enum OrderStatus {
  Succeed
  Failed
}
